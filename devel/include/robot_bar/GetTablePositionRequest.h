// Generated by gencpp from file robot_bar/GetTablePositionRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_BAR_MESSAGE_GETTABLEPOSITIONREQUEST_H
#define ROBOT_BAR_MESSAGE_GETTABLEPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_bar
{
template <class ContainerAllocator>
struct GetTablePositionRequest_
{
  typedef GetTablePositionRequest_<ContainerAllocator> Type;

  GetTablePositionRequest_()
    : tavolo(0)  {
    }
  GetTablePositionRequest_(const ContainerAllocator& _alloc)
    : tavolo(0)  {
  (void)_alloc;
    }



   typedef int32_t _tavolo_type;
  _tavolo_type tavolo;





  typedef boost::shared_ptr< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetTablePositionRequest_

typedef ::robot_bar::GetTablePositionRequest_<std::allocator<void> > GetTablePositionRequest;

typedef boost::shared_ptr< ::robot_bar::GetTablePositionRequest > GetTablePositionRequestPtr;
typedef boost::shared_ptr< ::robot_bar::GetTablePositionRequest const> GetTablePositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_bar::GetTablePositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_bar::GetTablePositionRequest_<ContainerAllocator1> & lhs, const ::robot_bar::GetTablePositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.tavolo == rhs.tavolo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_bar::GetTablePositionRequest_<ContainerAllocator1> & lhs, const ::robot_bar::GetTablePositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_bar

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa9e7e00d204e572d2cc7531d55f3c3d";
  }

  static const char* value(const ::robot_bar::GetTablePositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa9e7e00d204e572ULL;
  static const uint64_t static_value2 = 0xd2cc7531d55f3c3dULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_bar/GetTablePositionRequest";
  }

  static const char* value(const ::robot_bar::GetTablePositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 tavolo  # Input: numero del tavolo\n"
;
  }

  static const char* value(const ::robot_bar::GetTablePositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tavolo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetTablePositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_bar::GetTablePositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_bar::GetTablePositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "tavolo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tavolo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_BAR_MESSAGE_GETTABLEPOSITIONREQUEST_H
