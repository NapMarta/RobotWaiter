<launch>
  <!-- 1) Avvia Gazebo con la mappa bar_world.sdf -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find robot_bar)/world/bar_world.sdf"/>
  </include>

  <!-- 2) Carica URDF -->
  <param name="robot_description" command="cat $(find robot_bar)/urdf/robot_waiter.urdf"/>

  <!-- 3) Publisher per stati di giunto -->
  <node name="robot_state_publisher"
        pkg="robot_state_publisher"
        type="robot_state_publisher"
        output="screen" />

  <!-- 4) Spawn delayed -->
  <node name="spawn_robot"
      pkg="gazebo_ros"
      type="spawn_model"
      output="screen"
      launch-prefix="bash -c 'sleep 30; /opt/ros/noetic/lib/gazebo_ros/spawn_model \-param robot_description -urdf -model robot_waiter -x 0 -y 0 -z 0.2'" />


  <!-- 5) Nodi della logica del robot cameriere - *dopo* che Gazebo Ã¨ caricato -->
  <node pkg="robot_bar" type="table_locator.py" name="table_locator"
      output="screen" respawn="true" launch-prefix="bash -c 'sleep 60; $0'" />

  <node pkg="robot_bar" type="robot_controller.py" name="robot_controller"
        output="screen" respawn="true" launch-prefix="bash -c 'sleep 65; $0'" />

  <node pkg="robot_bar" type="delivery_manager.py" name="delivery_manager"
        output="screen" respawn="true" launch-prefix="bash -c 'sleep 70; $0'" />

  <node pkg="robot_bar" type="order_manager.py" name="order_manager"
        output="screen" respawn="true" launch-prefix="bash -c 'sleep 80; $0'" />

</launch>